#!/bin/bash

# ========================================================================
# Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

. ./setenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
   if [ "$IS_SERVER_START" == "false" ]; then
      exit
   fi
fi
. ./all_env.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi
. ./argenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

if [ "$HELP" == "true" ]; then
   echo "Usage:"
   echo "   start_server_local [-num <server number>] [-grid $GRIDS_OPT] [-site $SITES_OPT] [-rebalance] [-clean] [-quiet] [-?]"
   echo ""
   echo "   Starts a server in the specified grid and site. This is a local command."
   echo "   It must be executed in the host where the server is to be run. To start"
   echo "   a remote server, run the start_server command instead."
   echo ""
   echo "      <server number> Server number 1-99"
   echo "                      If the server number is 'auto', i.e., -num auto, then"
   echo "                      the server number is automatically determined."
   echo "      -grid      Starts the server in the specified grid. Default: ${GRID_DEFAULT}"
   echo "      -site      Starts the server in the specified site. Default: ${SITE_DEFAULT}"
   echo "      -clean     Cleans the working directory only if the server is not running."
   echo "      -quiet     Quiet mode. Suppresses verbose."
   echo "      -rebalance Rebalances the grid after the new server has been added."
   echo 
   echo ""
   echo "   Default: start_server_local -num 1 -grid $GRID_DEFAULT -site $SITE_DEFAULT"
   echo ""
   exit
fi

. ${GRIDS_DIR}/${GRID}/site_${SITE}.sh > /dev/null 2>&1

# Source in override_env.sh if exists. This file is typically used
# to override env variables.
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

# locators
LOCATORS=`getGemfireLocators`

# the parent directory of all servers 
if [ "$RUN_DIR" == "" ]; then
   RUN_DIR=$BASE_DIR/run
fi

# log directory
if [ "$LOG_DIR" == "" ]; then
   LOG_DIR=$BASE_DIR/log
fi
if [ ! -d $LOG_DIR ]; then
  mkdir -p $LOG_DIR
fi

# stats directory
if [ "$STATS_DIR" == "" ]; then
   STATS_DIR=$BASE_DIR/stats
fi
if [ ! -d $STATS_DIR ]; then
  mkdir -p $STATS_DIR
fi

# plugins directory
if [ "$PADO_PLUGINS_DIR" == "" ]; then
   PADO_PLUGINS_DIR=$BASE_DIR/plugins
fi
if [ ! -d $PADO_PLUGINS_DIR ]; then
  mkdir -p $PADO_PLUGINS_DIR
fi
# db directory
if [ "$PADO_DB_DIR" == "" ]; then
   PADO_DB_DIR=$BASE_DIR/db
fi
if [ ! -d $PADO_DB_DIR ]; then
  mkdir -p $PADO_DB_DIR
fi
# vp directory
if [ ! -d $PADO_DB_DIR/vp ]; then
  mkdir -p $PADO_DB_DIR/vp
fi

# etc directories env passed into Pado
export PADO_ETC_DIR=$ETC_DIR
export PADO_ETC_GRID_DIR=$ETC_GRID_DIR

#
# If auto, then determine the server number
#
if [ "$SERVER_NUM" == "auto" ]; then
   # ServerArray elements:
   #   array[0] ServerNumber
   #   array[1] ServerHost
   #   array[2] ServerPort
   #   array[3] DebugPort
   #   array[4] JmxPort
   #   array[5] GemFireProperties
   #   array[6] GemFireXml
   #   array[7] PadoProperties
   #   array[8] PadoXml
   #   array[9] IsServerStart
   setLineArray $GRIDS_DIR/$GRID/server_${SITE}.sh

   for (( i = 1; i <= $LAST_SERVER_NUM; i++ ))
   do
      line="${LineArray[$i]}"
      array=($line)
      SERVER_NUM=${array[0]}
      if [ "$SERVER_NUM" == "" ]; then
         continue;
      fi
      if [ $SERVER_NUM -lt 10 ]; then
         SERVER_NUM=0$SERVER_NUM
      fi
      # Set SERVER_NUM_NO_LEADING_ZERO
      if [[ $SERVER_NUM == 0* ]]; then
         SERVER_NUM_NO_LEADING_ZERO=${SERVER_NUM:1};
      else
         SERVER_NUM_NO_LEADING_ZERO=$SERVER_NUM
      fi
      SERVER_HOST=${array[1]}
      if [ "$SERVER_HOST" == "localhost" ]; then
         SERVER_HOST=`hostname`
         MY_ADDRESS=$SERVER_HOST
      fi
      export SERVER_ID=server-${GRID}-${SITE}${SERVER_NUM}

      # If server is already running then ignore
      servers=`$COMMAND_PREFIX $JAVA_HOME/bin/jps -v | grep "pado.home.dir=${PADO_HOME}" | grep "pado.vm.id=${SERVER_ID}" | grep java | awk '{print $1}'`
      spids=""
      for j in $servers; do
         spids="$j $spids"
      done
      if [ "$spids" != "" ]; then
          # Server is already running. Continue to next server.
          if [ "$QUIET" != "true" ]; then
             echo "$SERVER_ID already running. Skipping..."
          fi
          SERVER_HOST=""
          IS_SERVER_ALREADY_RUNNNIG=true
          continue
      fi

      if [ "$SERVER_HOST" == "$MY_ADDRESS" ]; then
         break
      fi
   done
   if [ "$SERVER_HOST" != "$MY_ADDRESS" ] && [ "$SERVER_HOST" != "localhost" ]; then
      if [ "$IS_SERVER_ALREADY_RUNNNIG" != "true" ]; then
         if [ "$QUIET" != "true" ]; then
            echo "This host is not configured to run cache server. Aborted."
         fi
      fi
      exit
   fi
fi

# Need to source in override_env.sh once more for overriding
# SERVER_ID. override_env.sh can provide SERVER_NUM to override
# SERVER_ID.
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
   export SERVER_ID=server-${GRID}-${SITE}${SERVER_NUM} 
fi

# directory in which the server is to be run
DIR=$RUN_DIR/${SERVER_ID}
if [ -d $DIR ] && [ "$CLEAN" == "true" ]; then
   servers=`$COMMAND_PREFIX $JAVA_HOME/bin/jps -v | grep "pado.home.dir=${PADO_HOME}" | grep "pado.vm.id=${SERVER_ID}" | grep java | awk '{print $1}'`
   spids=""
   for j in $servers; do
      spids="$j $spids"
   done
   if [ "$spids" == "" ]; then
      # clean only if the server is not running
      rm -rf $DIR
   fi
fi
if [ ! -d $DIR ]; then
  mkdir -p $DIR
fi

# disk-store directory
if [ "$DISK_STORE_DIR" == "" ]; then
   DISK_STORE_DIR=$DIR/$SERVER_ID/store
else
   DISK_STORE_DIR=$DISK_STORE_DIR/$SERVER_ID
fi

if [ ! -d $DISK_STORE_DIR ]; then
  mkdir -p $DISK_STORE_DIR
fi
if [ ! -d $DISK_STORE_DIR/cache ]; then
  mkdir -p $DISK_STORE_DIR/cache
fi
if [ ! -d $DISK_STORE_DIR/gateway ]; then
  mkdir -p $DISK_STORE_DIR/gateway
fi

# ServerArray elements:
#   array[0] ServerNumber
#   array[1] ServerHost
#   array[2] ServerPort
#   array[3] DebugPort
#   array[4] JmxPort
#   array[5] ServerProperties
#   array[6] ServerXml
#   array[7] PadoProperties
#   array[8] PadoXml
#   array[9] IsServerStart
setLineArray $GRIDS_DIR/$GRID/server_${SITE}.sh
line="${LineArray[$SERVER_NUM_NO_LEADING_ZERO]}"
array=($line)

SERVER_PORT=${array[2]}
DEBUG_PORT=${array[3]}
JMX_PORT=${array[4]}

# Set SERVER_PROPERTY_FILE
TMP_SERVER_PROPERTY_FILE=${array[5]}
#  "$SERVER_PROPERTY_FILE" == "false is checked for backward compatibility
# IsGateway has been removed.
if [ "$TMP_SERVER_PROPERTY_FILE" == "" ] || [ "$TMP_SERVER_PROPERTY_FILE" == "false" ]; then
   if [ "$SERVER_PROPERTY_FILE" == "" ]; then
      SERVER_PROPERTY_FILE=$ETC_GRID_DIR/server.properties
   fi
else
   SERVER_PROPERTY_FILE=$ETC_GRID_DIR/$TMP_SERVER_PROPERTY_FILE
fi

# Set SERVER_XML_FILE
TMP_SERVER_XML_FILE=${array[6]}
if [ "$TMP_SERVER_XML_FILE" == "" ]; then
   if [ "$SERVER_XML_FILE" == "" ]; then
      SERVER_XML_FILE=$ETC_GRID_DIR/server.xml
   fi
else
   SERVER_XML_FILE=$ETC_GRID_DIR/$TMP_SERVER_XML_FILE
fi

# Set PADO_PROPERTY_FILE
TMP_PADO_PROPERTY_FILE=${array[7]}
if [ "$TMP_PADO_PROPERTY_FILE" == "" ]; then
   if [ "$PADO_PROPERTY_FILE" == "" ]; then
      PADO_PROPERTY_FILE=$ETC_GRID_DIR/pado.properties
   fi
else
   PADO_PROPERTY_FILE=$ETC_GRID_DIR/$TMP_PADO_PROPERTY_FILE
fi

# Set PADO_XML_FILE
TMP_PADO_XML_FILE=${array[8]}
if [ "$TMP_PADO_XML_FILE" == "" ]; then
   if [ "$PADO_XML_FILE" == "" ]; then
      PADO_XML_FILE=$ETC_GRID_DIR/pado.xml
   fi
else
   PADO_XML_FILE=$ETC_GRID_DIR/$TMP_PADO_XML_FILE
fi

# Set IS_SERVER_START
IS_SERVER_START=${array[9]}
if [ "$IS_SERVER_START" == "" ]; then
   IS_SERVER_START=true
fi

# 
# If IS_SERVER_START is not true then do not start this server.
# Such servers must be started individually using the start_server command.
#
if [ "$IS_SERVER_START" != "true" ]; then
   exit
fi

export SERVER_NAME=${GRID}-${SITE}-${SERVER_NUM}
LOG_FILE=${LOG_DIR}/${SERVER_ID}.log
STATS_FILE=${STATS_DIR}/${SERVER_ID}.gfs

SERVER_PROPERTIES="--disable-default-server --J=-Dgfinit.cacheserver.1.port=$SERVER_PORT --J=-Dgfinit.cacheserver.1.notify-by-subscription=true --J=-Dgfinit.cacheserver.1.socket-buffer-size=131072"

# The following environment variables are defined in the scripts 
# and may be used in server.xml.
#    GRID - Grid ID.
#    SITE - Site name. This name should be used to configure gateways.
#    SERVER_PORT - Cache server port number for <cache-server port=${SERVER_PORT}" 
#    SERVER_BIND_ADDRESS - Cache server bind address
#    CLIENT_BIND_ADDRESS - Hostname for clients
#    DISK_STORE_DIR - Disk store directory path
#                  bind-address="${SERVER_BIND_ADDRESS}"
#                  hostname-for-clients="${CLIENT_BIND_ADDRESS}" />
#    <disk-store name="disk-store">
#       <disk-dirs>
#           <disk-dir>${DISK_STORE_DIR}/<disk-dir>
#       </disk-dirs>
#    </disk-store>

GEMFIRE_PROPERTIES="--name=$SERVER_NAME --J=-Dgemfire.log-file=${LOG_FILE} --statistic-archive-file=$STATS_FILE --cache-xml-file=$SERVER_XML_FILE --locators=${LOCATORS} --J=-Dgemfire.distributed-system-id=${SYSTEM_ID} --J=-DSITE=${SITE} --J=-DDISK_STORE_DIR=${DISK_STORE_DIR} --J=-DREMOTE_SYSTEM_ID_1=${REMOTE_SYSTEM_ID_1} --J=-DREMOTE_SYSTEM_ID_2=${REMOTE_SYSTEM_ID_2} --J=-Dgemfire.PREFER_SERIALIZED=true --J=-Dgemfire.BucketRegion.alwaysFireLocalListeners=false"

if [ "$SERVER_SECURITY_PROPERTY_FILE" == "" ]; then
   SERVER_SECURITY_PROPERTY_FILE=$ETC_GRID_DIR/gfsecurity.properties
fi

#
# Check if security is enabled
#
GEMFIRE_SECURITY_PROPERTY_SYSTEM=
if [ -f $SERVER_SECURITY_PROPERTY_FILE ]; then
   if [ "$SECURITY_ENABLED" == "true" ]; then
      GEMFIRE_SECURITY_PROPERTY_SYSTEM=--J=-DgemfireSecurityPropertyFile=$SERVER_SECURITY_PROPERTY_FILE
   fi
else
   if [ "$SECURITY_ENABLED" == "true" ]; then
      echo ""
      echo "Security is enabled but the following security file does not exist:"
      echo "   $SERVER_SECURITY_PROPERTY_FILE"
      echo "start_server Aborted."
      echo ""
      exit
   fi
fi
if [ "$SECURITY_ENABLED" == "true" ]; then
   SECURITY_PROPERTIES=--J=-Dpado.security.enabled=true
else
   SECURITY_PROPERTIES=--J=-Dpado.security.enabled=false
fi

if [ "$SECURITY_ENABLED" == "true" ]; then
   GEMFIRE_SECURITY_PROPERTY_SYSTEM="$GEMFIRE_SECURITY_PROPERTY_SYSTEM --J=-Dgemfire.security-client-authenticator=com.netcrest.pado.gemfire.security.PadoAuthenticator.create --J=-Dgemfire.security-client-accessor=com.netcrest.pado.gemfire.security.PadoAuthorization.create --J=-Dgemfire.security-client-auth-init=com.netcrest.pado.gemfire.security.PadoAuthInit.create"
fi

SECURITY_PROPERTIES="$SECURITY_PROPERTIES $GEMFIRE_SECURITY_PROPERTY_SYSTEM"

if [ "$GRID_ID" == "" ]; then
   GRID_ID=$GRID
fi
if [ "$GRID_NAME" == "" ]; then
   GRID_NAME=$GRID
fi
if [ "$SITE_ID" == "" ]; then
   SITE_ID=$SITE
fi
if [ "$SITE_NAME" == "" ]; then
   SITE_NAME=$SITE
fi

# 
# Application specifics 
#
# List all application specific properties here. Make sure to
# use the prefix "--J=-D", e.g., APP_PROPERTIES=--J=-Dfoo.test=true
# APP_PROPERTIES should be set in setenv.sh.
# 
APP_PROPERTIES=$APP_PROPERTIES

# 
# Pado specifics
#
PADO_PROPERTIES="--J=-Dpado.grid.id=$GRID_ID --J=-Dpado.grid.name=$GRID_NAME --J=-Dpado.site.id=$SITE_ID --J=-Dpado.site.name=$SITE_NAME --J=-Dpado.server.num=$SERVER_NUM --J=-Dpado.plugins.dir=$PADO_PLUGINS_DIR --J=-Dpado.etc.dir=$ETC_DIR --J=-Dpado.etc.grid.dir=$ETC_GRID_DIR --J=-Dpado.db.dir=$PADO_DB_DIR --J=-Dpado.properties=$PADO_PROPERTY_FILE --J=-Dpado.appConfigDir=$PADO_APP_CONFIG_DIR --J=-Dpado.server=true --J=-Dpado.config-file=$PADO_XML_FILE --J=-Dpado.log.gridInfo=false --J=-Djavax.xml.accessExternalDTD=all"

#
# HEAP_MAX is set in grids/<grid-id>/site_<site-id>.sh
#
HEAPSIZE="--initial-heap=${HEAP_MAX} --max-heap=${HEAP_MAX}"

#
# GC paramenters
#
# GC_PARAMETERS="--J=-XX:+UseParNewGC --J=-XX:+UseConcMarkSweepGC --J=-XX:NewSize=256m --J=-XX:CMSInitiatingOccupancyFraction=75"
GC_PARAMETERS="--J=-XX:+UseParNewGC --J=-XX:+UseConcMarkSweepGC --J=-XX:CMSInitiatingOccupancyFraction=75"

JMX_PARAMETERS="--J=-Dcom.sun.management.jmxremote.port=${JMX_PORT} --J=-Dcom.sun.management.jmxremote.ssl=false --J=-Dcom.sun.management.jmxremote.authenticate=false"

#
# Debug parameters.
#
if [ "$DEBUG_ENABLED" == "true" ]; then
   DEBUG="--J=-Xdebug --J='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=${DEBUG_PORT}'"
else
   DEBUG=
fi


# -------------------------------------------------------------------

echo "*****************************************************"
echo "Starting $SERVER_ID on host $MY_ADDRESS..."
echo "*****************************************************"

echo gfsh start server --dir=$DIR $JVM_EXTRA --J=-Dpado.vm.id=${SERVER_ID} --J=-Dpado.home.dir=$PADO_HOME --J=-Djava.awt.headless=true $HEAPSIZE $GC_PARAMETERS $JMX_PARAMETERS $DEBUG --J=-DgemfirePropertyFile=$SERVER_PROPERTY_FILE $SECURITY_PROPERTIES $SERVER_PROPERTIES $GEMFIRE_PROPERTIES $PADO_PROPERTIES $APP_PROPERTIES $REBALANCE --classpath=$CLASSPATH
gfsh start server --dir=$DIR $JVM_EXTRA --J=-Dpado.vm.id=${SERVER_ID} --J=-Dpado.home.dir=$PADO_HOME --J=-Djava.awt.headless=true $HEAPSIZE $GC_PARAMETERS $JMX_PARAMETERS $DEBUG --J=-DgemfirePropertyFile=$SERVER_PROPERTY_FILE $SECURITY_PROPERTIES $SERVER_PROPERTIES $GEMFIRE_PROPERTIES $PADO_PROPERTIES $APP_PROPERTIES $REBALANCE --classpath=$CLASSPATH
