#!/bin/bash

# ========================================================================
# Copyright (c) 2013-2015 Netcrest Technologies, LLC. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

. ./setenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi
. ./all_env.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi
. ./argenv.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

if [ "$HELP" == "true" ]; then
   echo "Usage:"
   echo "   stop_server_local [-num <server number>] [-grid $GRIDS_OPT] [-site $SITES_OPT] [-?]"
   echo ""
   echo "   Stops a server in the specified grid and site. This is a local command."
   echo "   It must be executed in the host where the server is running. To stop"
   echo "   a remote server, run the stop_server command instead."
   echo ""
   echo "      <server number> Server number 1-99"
   echo "                      If the server number is 'auto', i.e., -num auto, then"
   echo "                      the server number is automatically determined."
   echo "      -grid      Stops the server in the specified grid. Default: ${GRID_DEFAULT}"
   echo "      -site      Stops the server in the specified site. Default: ${SITE_DEFAULT}"
   echo ""
   echo "   Default: stop_server -num 1 -grid $GRID_DEFAULT -site $SITE_DEFAULT"
   echo ""
   exit
fi

. ${GRIDS_DIR}/${GRID}/site_${SITE}.sh > /dev/null 2>&1
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
fi

# the parent directory of all servers 
if [ "$RUN_DIR" == "" ]; then
   RUN_DIR=$BASE_DIR/run
fi

#
# If auto, then determine the server number
#
if [ "$SERVER_NUM" == "auto" ]; then
   # ServerArray elements:
   #   array[0] ServerNumber
   #   array[1] ServerHost
   #   array[2] ServerPort
   #   array[3] DebugPort
   #   array[4] JmxPort
   #   array[5] GemFireProperties
   #   array[6] GemFireXml
   #   array[7] PadoProperties
   #   array[8] PadoXml
   #   array[9] IsServerStart
   setLineArray $GRIDS_DIR/$GRID/server_${SITE}.sh

   for (( i = 1; i <= $LAST_SERVER_NUM; i++ ))
   do
      line="${LineArray[$i]}"
      array=($line)
      SERVER_NUM=${array[0]}
      if [ "$SERVER_NUM" == "" ]; then
         continue;
      fi
      if [ $SERVER_NUM -lt 10 ]; then
         SERVER_NUM=0$SERVER_NUM
      fi
      # Set SERVER_NUM_NO_LEADING_ZERO
      if [[ $SERVER_NUM == 0* ]]; then
         SERVER_NUM_NO_LEADING_ZERO=${SERVER_NUM:1};
      else
         SERVER_NUM_NO_LEADING_ZERO=$SERVER_NUM
      fi
      SERVER_HOST=${array[1]}
      if [ "$SERVER_HOST" == "localhost" ]; then
         SERVER_HOST=`hostname`
         MY_ADDRESS=$SERVER_HOST
      fi
      SERVER_ID=server-${GRID}-${SITE}${SERVER_NUM}

      # If server is running then breakout to stop it
      servers=`$COMMAND_PREFIX $JAVA_HOME/bin/jps -v | grep "pado.home.dir=${PADO_HOME}" | grep "pado.vm.id=${SERVER_ID}" | grep java | awk '{print $1}'`
      spids=""
      for j in $servers; do
         spids="$j $spids"
      done
      if [ "$spids" != "" ]; then
          # Server is running. Break out to stop it.
          echo "$SERVER_ID running. Stopping..."
          IS_SERVER_ALREADY_RUNNNIG=true
          break
      fi

      if [ "$SERVER_HOST" == "$MY_ADDRESS" ]; then
         break
      fi
   done
   if [ "$SERVER_HOST" != "$MY_ADDRESS" ] && [ "$SERVER_HOST" != "localhost" ]; then
      if [ "$IS_SERVER_ALREADY_RUNNNIG" != "true" ]; then
         echo "This host is not configured for cache server. Aborted."
      fi
      exit
   fi
fi

# Need to source in override_env.sh once more for overriding
# SERVER_ID. override_env.sh can provide SERVER_NUM to override
# SERVER_ID.
if [ -e override_env.sh ]; then
   . override_env.sh > /dev/null 2>&1
   SERVER_ID=server-${GRID}-${SITE}${SERVER_NUM} 
fi

# directory in which the server is to be stopped
DIR=$RUN_DIR/${SERVER_ID}
if [ ! -d $DIR ]; then
  mkdir -p $DIR
fi

echo stop_server -num $SERVER_NUM_NO_LEADING_ZERO -grid $GRID -site $SITE
echo gfsh stop server --dir=$DIR
gfsh stop server --dir=$DIR
